import { createWriteStream, existsSync } from 'node:fs'
import { resolve } from 'node:path'

import { mkdirp } from 'mkdirp'
import { rimraf } from 'rimraf'

import { getTableFields } from '../database/getTableFields.js'
import { toCamelCase } from '../helper/toCamelCase.js'
import { toUpperCamelCase } from '../helper/toUpperCamelCase.js'
import { getSchemaStringFromDefinition } from './getSchemaStringFromDefinition.js'

export const generateTableSchema = async (outFolder: string, tableNames: string[]) => {
	await mkdirp(outFolder)
	const propTypeFilename = resolve(outFolder, 'PropType.ts')
	if (!existsSync(propTypeFilename)) {
		const tFile = createWriteStream(propTypeFilename)
		tFile.write('export type PropType<TObj, TProp extends keyof TObj> = TObj[TProp];')
		tFile.close()
	}

	const genSchemaFolder = resolve(outFolder, '_generated')

	console.log('Generating schema in', genSchemaFolder)

	for (const name of tableNames) {
		const tableName = toCamelCase(name)

		const tableSchemaFolder = resolve(genSchemaFolder, tableName)
		console.log(`üëâ [${tableName}]: ${tableSchemaFolder}`)
		await rimraf(tableSchemaFolder)
		await mkdirp(tableSchemaFolder)

		const fields = await getTableFields(name)

		const genSchemaFileName = resolve(tableSchemaFolder, `${toCamelCase(tableName)}SchemaGen.ts`)
		const genSchemaFile = createWriteStream(genSchemaFileName)

		const inputFields = Object.entries(fields)
			.map(([fname, definition]) => {
				return ` "${fname}": ${getSchemaStringFromDefinition(definition, true)}`
			})
			.join(',\n')

		const outputFields = Object.entries(fields)
			.map(([fname, definition]) => {
				return ` "${fname}": ${getSchemaStringFromDefinition(definition, false)}`
			})
			.join(',\n')

		genSchemaFile.write(
			`// ====================
// DO NOT EDIT THIS FILE!
// This file is autogenerated and will be overwritten during generation!
// ====================

import { z } from "zod";

// the create schema for table ${name}
export const ${tableName}InputSchemaGen = {
${inputFields}
};

// the select schema for table ${name}
export const ${tableName}OutputSchemaGen = {
${outputFields}
};

`,
		)

		genSchemaFile.close()
		console.log(` ‚úÖ [${tableName}]: ${tableName}Schema.ts`)

		const schemaFolder = resolve(outFolder, 'schema', tableName)
		await mkdirp(schemaFolder)

		const schemaFileName = resolve(schemaFolder, `${toCamelCase(tableName)}Schema.ts`)

		if (!existsSync(schemaFileName)) {
			const sFile = createWriteStream(schemaFileName)
			sFile.write(`/* Place your custom changes here */

import { z } from "zod";

import { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from "../../_generated/${tableName}/${tableName}SchemaGen.js";

// payload schema for creating a new ${name} entity
export const ${tableName}CreateSchema = z.object({
  ...${tableName}InputSchemaGen
  // add your custom fields here, which are not part of SurrealDB table schema
  // they are not overwritten by the next run
})

// payload schema for fetching a ${name} entity
export const ${tableName}Schema = z.object({
  id: z.string().startsWith("${name}:"),
  ...${tableName}OutputSchemaGen
  // add your custom fields here, which are not part of SurrealDB table schema
  // they are not overwritten by the next run
})
`)
			sFile.close()
			console.log(` ‚úÖ [${tableName}]: ${tableName}Schema.ts`)
		} else {
			console.log(` ‚ùé [${tableName}]: ${tableName}Schema.ts already exists`)
		}

		const typeFileName = resolve(schemaFolder, `${toCamelCase(tableName)}Types.ts`)

		if (!existsSync(typeFileName)) {
			const tFile = createWriteStream(typeFileName)
			tFile.write(`/* Place your custom changes here */

import { z } from "zod";

import { ${tableName}CreateSchema, ${tableName}Schema } from "./${tableName}Schema.js";

// the create type for table ${name}
export type ${toUpperCamelCase(tableName)}Create = z.input<typeof ${tableName}CreateSchema>

// the select type for table ${name}
export type ${toUpperCamelCase(tableName)} = z.output<typeof ${tableName}Schema>
      `)
			tFile.close()
			console.log(` ‚úÖ [${tableName}]: ${tableName}Types.ts`)
		} else {
			console.log(` ‚ùé [${tableName}]: ${tableName}Types.ts already exists`)
		}
	}
}
